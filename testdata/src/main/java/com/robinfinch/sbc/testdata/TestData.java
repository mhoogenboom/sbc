package com.robinfinch.sbc.testdata;

import com.robinfinch.sbc.core.Hash;
import com.robinfinch.sbc.core.identity.User;
import com.robinfinch.sbc.core.ledger.*;
import org.junit.Before;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

public class TestData {

    public static final byte[] ALICE_PUB_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0,
            3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -106, 117, 12, 82, -121, -123, 64, -29, 99, 110, 46,
            127, 106, 120, -53, -38, 60, 46, 105, -40, 97, -56, -42, 113, 70, 82, 29, -67, 38, -87, -67, 27, 122, 34,
            83, 27, 100, -79, -103, 29, -53, -119, -25, -2, 18, -98, 90, -91, -56, -32, 56, 7, -86, 111, 113, 29, -65,
            76, 75, 17, -116, 108, 75, 110, -100, 23, -52, -2, -124, -92, 114, 46, -98, 68, 112, 65, -8, 31, 14, 26,
            -28, 96, -50, 52, -23, 52, 3, 117, -85, -52, 57, -4, 109, -33, -108, -64, -126, 67, 81, 71, -110, 116, -45,
            72, -41, -106, 90, 0, -20, 83, 69, -25, 115, -83, 100, -98, 126, 37, 112, -24, -45, 1, 18, -33, -64, -2,
            -110, -69, 2, 3, 1, 0, 1};

    public static final byte[] ALICE_PRIV_KEY = {48, -126, 2, 118, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13,
            1, 1, 1, 5, 0, 4, -126, 2, 96, 48, -126, 2, 92, 2, 1, 0, 2, -127, -127, 0, -106, 117, 12, 82, -121, -123,
            64, -29, 99, 110, 46, 127, 106, 120, -53, -38, 60, 46, 105, -40, 97, -56, -42, 113, 70, 82, 29, -67, 38,
            -87, -67, 27, 122, 34, 83, 27, 100, -79, -103, 29, -53, -119, -25, -2, 18, -98, 90, -91, -56, -32, 56, 7,
            -86, 111, 113, 29, -65, 76, 75, 17, -116, 108, 75, 110, -100, 23, -52, -2, -124, -92, 114, 46, -98, 68,
            112, 65, -8, 31, 14, 26, -28, 96, -50, 52, -23, 52, 3, 117, -85, -52, 57, -4, 109, -33, -108, -64, -126,
            67, 81, 71, -110, 116, -45, 72, -41, -106, 90, 0, -20, 83, 69, -25, 115, -83, 100, -98, 126, 37, 112, -24,
            -45, 1, 18, -33, -64, -2, -110, -69, 2, 3, 1, 0, 1, 2, -127, -128, 92, 23, -108, -51, 71, 42, 39, 7, -121,
            -86, -65, 71, 58, 50, 106, 4, 80, 101, -48, 95, -93, -86, -68, -89, 100, -11, -118, 66, 102, -47, -22, 112,
            81, 23, -123, 106, -12, -3, 71, -51, 86, -14, 56, 79, -23, -79, -121, -90, -122, 7, -56, 3, -39, 44, -111,
            62, 54, 3, 74, -57, -104, -2, 8, 68, -39, 22, -3, -67, -68, 74, 116, 55, -103, -96, -123, 21, -123, -123,
            50, 43, 39, 37, -116, -71, -55, -113, 93, 93, -67, -126, 60, -69, -73, -34, 44, 59, -68, 63, -73, -18,
            -126, 33, -65, -106, 46, 101, -78, 86, 82, -45, -110, 85, -122, -124, -20, -61, 124, 24, -62, -125, -45,
            -53, 52, -1, -122, -21, 28, -111, 2, 65, 0, -1, -123, -40, -5, -62, -43, -50, -116, -79, -11, 38, -16, 22,
            114, -59, 127, -99, -87, 45, 48, -35, -124, 103, -31, 111, 97, -11, -59, 49, 54, -111, -116, 125, 96, -128,
            11, 113, -73, 104, -56, -86, -34, 36, 81, -82, -53, -126, -25, 80, 48, 71, -52, 65, -114, -91, -47, -3, 85,
            31, 28, 106, -64, 20, -57, 2, 65, 0, -106, -68, -7, 90, -91, -84, -55, 108, -35, -98, 54, 77, 65, -38, -27,
            -6, -44, 63, -90, -41, 26, 101, 35, -118, -6, 14, -94, -122, -58, -87, 68, 99, 58, -120, -11, -45, -92, -5,
            111, -82, -29, -64, 46, -86, 22, -44, -23, 17, 67, 16, 36, 46, -24, 105, 80, 8, 6, -31, -79, -36, 25, 78,
            118, 109, 2, 65, 0, -21, 111, -121, 99, 73, -67, 56, -56, 120, 59, -6, -7, -94, -91, 115, -122, 71, 93,
            -106, -50, -4, 124, 64, 62, -2, 34, -45, -110, 50, -21, 37, -90, -67, -21, 9, 112, 2, 2, 77, 96, -1, -41,
            24, -67, -50, -127, -93, -122, -64, 99, 11, -12, -114, -65, 1, -40, 127, 68, 76, 27, 33, -35, 4, 7, 2, 64,
            2, 76, -49, -31, 58, 53, -16, -68, -32, -124, -47, 127, 76, 73, -14, -56, 105, 4, -81, -97, 8, -96, 18,
            114, -60, 110, 4, -68, -39, -69, 43, 119, -8, 36, -82, -37, -109, -32, -30, 75, 96, -34, 69, -40, 2, -111,
            45, 29, 62, 80, -72, -68, -98, 127, 60, -31, 98, 121, 127, 37, 68, -99, -107, -31, 2, 64, 71, 69, 74, -41,
            58, 82, -76, 87, -51, 42, -92, -77, -3, 73, 7, 85, 37, 95, 29, -11, 112, 80, 32, -47, 85, -34, -58, 1,
            -74, -125, -124, 101, -60, -79, 1, -13, 8, -126, 31, -61, 62, 108, 13, -13, 7, -46, -37, -98, 77, -90, -11,
            -91, 54, -67, -126, 81, -47, 98, -73, 99, -88, 57, -39, 69};

    public static final byte[] BOB_PUB_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0,
            3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -118, 77, 69, -46, 60, -112, -61, 114, 15, -3, -87, 31,
            -35, 101, 72, -32, -5, 52, 45, -11, 32, -29, -97, 114, 94, 97, -28, 68, 113, 66, 109, -97, 59, 54, -87, -72,
            -43, 28, -111, 112, -84, -77, -99, 84, 31, -61, 112, -10, 85, -33, -36, -44, -93, -46, -118, 49, -94, 53,
            -78, 38, 0, -47, 39, 105, -42, 4, 50, 42, -77, -23, -71, -26, 111, 121, -61, -62, 110, -77, 15, 12, -30,
            68, 58, 106, 107, -51, 14, -83, 95, 103, 101, 62, 67, -26, -65, -88, 23, -58, -64, 3, -94, 109, 122, -90,
            47, -63, -51, 77, -27, -37, 23, -113, -93, -5, -6, -6, 95, -2, 114, 81, 70, -70, -31, -58, 10, 78, -125,
            21, 2, 3, 1, 0, 1};

    public static final byte[] BOB_PRIV_KEY = {48, -126, 2, 119, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1,
            1, 1, 5, 0, 4, -126, 2, 97, 48, -126, 2, 93, 2, 1, 0, 2, -127, -127, 0, -118, 77, 69, -46, 60, -112, -61,
            114, 15, -3, -87, 31, -35, 101, 72, -32, -5, 52, 45, -11, 32, -29, -97, 114, 94, 97, -28, 68, 113, 66, 109,
            -97, 59, 54, -87, -72, -43, 28, -111, 112, -84, -77, -99, 84, 31, -61, 112, -10, 85, -33, -36, -44, -93,
            -46, -118, 49, -94, 53, -78, 38, 0, -47, 39, 105, -42, 4, 50, 42, -77, -23, -71, -26, 111, 121, -61, -62,
            110, -77, 15, 12, -30, 68, 58, 106, 107, -51, 14, -83, 95, 103, 101, 62, 67, -26, -65, -88, 23, -58, -64,
            3, -94, 109, 122, -90, 47, -63, -51, 77, -27, -37, 23, -113, -93, -5, -6, -6, 95, -2, 114, 81, 70, -70, -31,
            -58, 10, 78, -125, 21, 2, 3, 1, 0, 1, 2, -127, -128, 19, -66, -10, -94, 14, -83, -88, -118, 7, -120, 114,
            -10, 46, -71, 0, 79, -58, -19, -21, 69, -35, 93, 66, 109, -92, -42, 27, 46, 62, 113, 122, -113, 74, 120, 2,
            -127, 118, 67, -18, -20, 4, 108, 92, -95, 31, 43, -37, 92, 0, 100, -58, -11, -63, 50, 21, 51, 2, -14, -31,
            -83, -107, 94, 71, 95, 26, 72, -78, -116, -111, -44, 0, -97, -85, -61, 56, 122, 115, 45, 42, -68, 79, -3,
            -14, 61, -23, 50, 34, 75, 122, 68, 105, -83, 30, -78, -21, 17, 125, 59, -84, 21, -96, 54, -121, -127, 6,
            33, 56, 113, -65, 94, -99, 113, 108, 61, 86, 105, -20, -89, 8, 47, 92, 127, -107, -100, -84, -51, 96, -31,
            2, 65, 0, -66, 5, -81, 36, -92, -99, -121, -113, 73, -122, -109, 48, 42, 120, -20, 97, -62, 58, 96, 36, -23,
            -105, -121, -10, -86, -19, 66, 124, 123, -85, -120, -68, -126, 12, -32, -47, 88, 102, -70, 70, -117, 23, 3,
            33, 100, -35, 86, 16, 45, 75, 95, 94, -36, -54, 18, -61, 93, 116, -37, -12, 0, 61, -9, -55, 2, 65, 0, -70,
            82, 95, 80, 7, 89, 11, 8, -64, -22, 88, -101, 91, -11, 63, 83, -23, 87, 34, -51, -3, -33, 21, -55, 26, 51,
            -102, -11, 109, 17, -59, -113, 89, 73, 1, -87, 47, 32, -57, 29, -66, -76, -41, -101, -85, 92, 87, 122, -32,
            63, -118, -79, 59, -31, 94, -78, 8, -75, -14, 57, 100, 26, 46, -19, 2, 65, 0, -85, -31, 88, 91, 60, -53,
            -127, 35, 10, -50, -65, -76, -127, -74, 127, -102, -83, -91, 63, -14, 35, -104, -3, 83, 17, -87, 42, -54,
            -114, -46, -54, 12, 57, 86, -116, -60, -49, -63, -100, 28, -45, 19, 45, -79, -73, 26, -66, 14, 67, -22, 57,
            -118, 5, 12, -125, -116, 83, -84, -80, -120, 52, -17, -40, -127, 2, 64, 32, -31, 26, 90, -72, 1, 57, -106,
            64, -36, -39, -24, 8, -111, 61, -84, -92, 23, -79, 87, -94, 126, 52, -116, -7, 103, -77, -25, -83, 104, -98,
            113, 78, 115, 56, -84, -49, 89, 60, 105, -2, 86, 81, 89, -14, 34, 104, 121, -111, -117, 5, 1, -125, -84,
            -96, -106, 80, 61, 51, 82, 119, 92, -69, 125, 2, 65, 0, -127, 53, -20, -57, -91, -47, -42, 41, -27, -91,
            53, 92, -48, 29, 89, 88, -7, 120, -75, 59, 18, 88, 89, -97, 120, 81, 53, 35, 84, 71, 114, 69, 55, -70, 25,
            -93, -117, 114, -38, 110, -42, 71, -70, 105, -70, 34, -57, 36, -1, 109, 25, 28, 67, -80, 28, 107, 12, -118,
            -58, -44, 25, 79, 49, 50};

    protected static byte[] ENTRY1_SIGNATURE = {23, -51, 65, 87, 95, -79, -87, 66, -62, -13, 28, 52, 45, -57, -81, -9,
            75, 117, -121, 40, 17, 90, -94, -35, 60, 88, 25, 81, -110, 127, -56, -37, 26, 116, -90, -7, 33, 109, 91,
            82, 121, 78, -62, 84, 104, -34, -76, -83, -4, -25, 29, 42, -77, 62, -119, -65, 117, -74, 21, -90, 15, -45,
            -128, 5, 42, -84, -62, -14, -125, -32, -110, 38, 33, -29, -23, 103, 65, -123, 88, 114, 81, 26, 25, -13,
            -27, 38, -110, 36, 51, -74, -75, 62, 111, 34, 51, 46, 11, -32, -106, -86, 20, -7, 44, -67, -39, -48, -84,
            2, 117, -92, 20, -95, -36, -17, -113, -60, 28, 94, -23, -84, -64, -69, 99, 71, 117, 77, -15, 37};

    protected static Hash ENTRY1_HASH = new Hash(new byte[] {-116, -19, -55, 9, 93, 20, -107, -68, -128, 24, 13,
            -23, -101, -100, 27, -36, 33, 1, 43, -36, -122, -68, -109, 105, 32, 115, 123, -111, -90, -80, 92, -22});

    protected static byte[] ENTRY2_SIGNATURE = {70, 16, -35, 52, 49, -120, 3, -42, 30, 38, -105, 59, -21, -59, 54, 56,
            2, 71, -98, -1, -5, 14, -108, -77, -90, -39, 104, 74, 1, 68, -25, 81, -106, -115, 92, -17, -98, -16, 118,
            101, -19, 39, -63, 25, 114, -64, 47, -53, -102, -121, -12, -97, 7, 11, 89, 96, 75, 61, -6, 82, -100, -100,
            97, 16, 93, 26, 73, -65, -42, -24, 9, 45, 81, -126, -95, 97, -26, -29, -44, 11, 94, -22, 21, -70, 32, 20,
            -122, -108, -119, -76, -111, 95, 125, 119, -1, -56, 12, -81, 1, -36, 54, -87, 74, -21, 110, 80, -73, -94,
            -78, 0, -53, -36, 67, -33, 116, -111, -29, -40, 8, -99, 25, 47, 82, 68, 87, -2, -106, 97};

    protected static Hash ENTRY2_HASH = new Hash(new byte[] {-127, -128, -47, -86, -88, -100, -68, -36, -96, 109,
            115, 13, -84, -49, -112, 81, -104, -117, 80, 25, 24, 49, -81, 40, 86, -89, 102, -41, 27, -32, 26, -20});

    protected static Hash ENTRY3_HASH = new Hash(new byte[] {78, 7, 64, -123, 98, -66, -37, -117, 96, -50, 5, -63,
            -34, -49, -29, -83, 22, -73, 34, 48, -106, 125, -32, 31, 100, 11, 126, 71, 41, -76, -97, -50});

    protected static Hash BLOCK1_HASH = new Hash(new byte[] {0, 92, 36, 122, 52, -18, -106, 66, 99, 57, -66, 87, -62,
            -6, 89, 106, 91, -1, -71, 22, -126, -128, -120, -115, -125, -107, 116, 126, 107, 50, 64, -72});

    protected static byte[] ENTRY4_SIGNATURE = {119, 49, -93, 28, 60, 47, 20, -94, 30, 106, -106, -113, 85, 66, 1,
            68, -11, 53, 31, 95, 98, -53, 84, 97, 126, -15, 87, 13, -7, -44, -49, 102, -39, 56, -7, 91, -104, 64,
            -124, -74, 71, 49, 85, -101, 111, 8, -101, -32, 1, -95, 87, -27, 58, -66, -111, 93, -1, -125, -38, -87,
            117, 104, -79, 117, 107, 42, -4, -110, -2, -83, 120, 85, 49, 38, 28, -105, -99, -1, -96, -87, 27, -64,
            -55, 118, 82, 9, -120, -92, 122, 88, 17, 96, -3, -37, 94, 34, -126, -126, 81, -93, -20, 62, -27, -7,
            111, 104, 116, 6, -40, -78, -27, 101, -57, 19, 48, 98, -4, 43, -3, 73, 52, -57, -61, -128, 8, -104,
            51, -101};

    protected static Hash ENTRY4_HASH = new Hash(new byte[] {6, -106, -39, 93, 32, 32, 39, 21, 55, -81, -24, 14,
            -61, -81, 29, 5, 13, -71, -128, 109, -86, -12, 27, -121, -58, 22, -29, 24, 79, 19, 51, -37});

    protected static Hash BLOCK2_HASH = new Hash(new byte[] {0, -80, 22, -69, -103, -35, -104, 53, 37, -2, -8, 63,
            50, 78, -3, -29, 107, -6, -28, -37, -49, -85, -10, 11, -69, -14, 77, -127, -39, 91, 99, -124});

    protected static byte[] ENTRY5_SIGNATURE = {104, 65, -66, 112, 0, -116, -38, 61, -37, 56, 95, -31, -44, 30, 80,
            -71, -91, 118, 125, -84, -42, 91, 74, 11, 19, -25, -19, 19, 42, 76, 4, -72, -79, 23, -88, -90, -21, 44,
            126, 10, 66, -55, -26, -80, 25, 25, 63, 1, 127, -37, 67, -72, 103, 27, 70, 64, 95, -29, 104, 51, 15,
            -122, -13, 46, 0, -64, 29, -64, -25, 80, 22, 49, -70, 5, -42, -106, 96, 26, 98, -11, -63, 84, -110, 39,
            -35, -107, -74, -51, -26, -125, 66, 67, -52, -51, -57, -116, 78, 73, 44, 108, 31, -27, 100, 94, -95,
            -116, 11, 127, -49, 58, -128, 121, 112, 91, -52, -121, 9, 42, 97, -9, -65, -62, 105, -6, 89, 15, -16, 72};

    protected static Hash ENTRY5_HASH = new Hash(new byte[] {-96, 14, 117, 26, 48, -37, -21, -64, -110, -65, 126, 76,
            61, 78, -123, -128, 39, 74, 16, -64, -88, 22, -106, 103, 86, -109, 42, -8, 75, -54, -40, 52});

    protected static Hash ENTRY6_HASH = new Hash(new byte[] {-25, -10, -64, 17, 119, 110, -115, -73, -51, 51, 11, 84,
            23, 79, -41, 111, 125, 2, 22, -74, 18, 56, 122, 95, -4, -5, -127, -26, -16, -111, -106, -125});

    protected static Hash BLOCK3_HASH = new Hash(new byte[] {0, -41, 52, -112, -35, -17, 39, 109, -84, -39, 68, 34,
            48, 124, -14, -63, -31, 115, 74, -83, 32, 15, 88, 58, -76, 67, -62, 1, 60, -19, -98, -74});

    protected User alice;

    protected User bob;

    @Mock
    protected Transaction t1;

    protected Entry entry1;

    @Mock
    protected Transaction t2;

    protected Entry entry2;

    @Mock
    protected Transaction t3;

    protected Entry entry3;

    protected Block block1;

    @Mock
    protected Transaction t4;

    protected Entry entry4;

    protected Block block2;

    @Mock
    protected Transaction t5;

    protected Entry entry5;

    @Mock
    protected Transaction t6;

    protected Entry entry6;

    protected Block block3;

    protected Ledger ledger;

    @Before
    public void setUp() throws Exception {

        MockitoAnnotations.initMocks(this);

        KeyFactory kf = KeyFactory.getInstance("RSA");

        {
            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(ALICE_PUB_KEY);
            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(ALICE_PRIV_KEY);

            alice = new User("alice", new KeyPair(kf.generatePublic(publicKeySpec), kf.generatePrivate(privateKeySpec)));
        }

        {
            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(BOB_PUB_KEY);
            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(BOB_PRIV_KEY);

            bob = new User("bob", new KeyPair(kf.generatePublic(publicKeySpec), kf.generatePrivate(privateKeySpec)));
        }

        entry1 = new Entry(new Entry.Builder()
                .withTransaction(t1)
                .withTimestamp(1L)
                .build(), ENTRY1_SIGNATURE);

        entry2 = new Entry(new Entry.Builder()
                .withTransaction(t2)
                .withTimestamp(2L)
                .build(), ENTRY2_SIGNATURE);

        entry3 = new Entry.Builder()
                .withTransaction(t3)
                .withTimestamp(3L)
                .build();

        block1 = new Block.Builder()
                .withUserId("alice")
                .withTimestamp(1L)
                .withProofOfWork("200")
                .withTransaction(entry1)
                .withTransaction(entry2)
                .withTransaction(entry3)
                .build();

        entry4 = new Entry(new Entry.Builder()
                .withTransaction(t4)
                .withTimestamp(4L)
                .build(), ENTRY4_SIGNATURE);

        block2 = new Block.Builder()
                .withPreviousHash(BLOCK1_HASH)
                .withUserId("bob")
                .withTimestamp(2L)
                .withProofOfWork("30")
                .withTransaction(entry4)
                .build();

        entry5 = new Entry(new Entry.Builder()
                .withTransaction(t5)
                .withTimestamp(5L)
                .build(), ENTRY5_SIGNATURE);

        entry6 = new Entry.Builder()
                .withTransaction(t6)
                .withTimestamp(6L)
                .build();

        block3 = new Block.Builder()
                .withPreviousHash(BLOCK2_HASH)
                .withUserId("chris")
                .withTimestamp(3L)
                .withProofOfWork("306")
                .withTransaction(entry5)
                .withTransaction(entry6)
                .build();

        ledger = new EmptyLedger()
                .append(block1)
                .append(block2)
                .append(block3);
    }
}
