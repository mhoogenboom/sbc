package com.robinfinch.sbc.testdata;

import com.robinfinch.sbc.core.Hash;
import com.robinfinch.sbc.core.identity.User;
import com.robinfinch.sbc.core.ledger.Block;
import com.robinfinch.sbc.core.ledger.Transaction;
import com.robinfinch.sbc.p2p.config.UniqueAsset;
import com.robinfinch.sbc.p2p.config.ValueAsset;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

public class Tests {

    public static final byte[] ALICE_PUB_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0,
            3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -106, 117, 12, 82, -121, -123, 64, -29, 99, 110, 46,
            127, 106, 120, -53, -38, 60, 46, 105, -40, 97, -56, -42, 113, 70, 82, 29, -67, 38, -87, -67, 27, 122, 34,
            83, 27, 100, -79, -103, 29, -53, -119, -25, -2, 18, -98, 90, -91, -56, -32, 56, 7, -86, 111, 113, 29, -65,
            76, 75, 17, -116, 108, 75, 110, -100, 23, -52, -2, -124, -92, 114, 46, -98, 68, 112, 65, -8, 31, 14, 26,
            -28, 96, -50, 52, -23, 52, 3, 117, -85, -52, 57, -4, 109, -33, -108, -64, -126, 67, 81, 71, -110, 116, -45,
            72, -41, -106, 90, 0, -20, 83, 69, -25, 115, -83, 100, -98, 126, 37, 112, -24, -45, 1, 18, -33, -64, -2,
            -110, -69, 2, 3, 1, 0, 1};

    public static final byte[] ALICE_PRIV_KEY = {48, -126, 2, 118, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13,
            1, 1, 1, 5, 0, 4, -126, 2, 96, 48, -126, 2, 92, 2, 1, 0, 2, -127, -127, 0, -106, 117, 12, 82, -121, -123,
            64, -29, 99, 110, 46, 127, 106, 120, -53, -38, 60, 46, 105, -40, 97, -56, -42, 113, 70, 82, 29, -67, 38,
            -87, -67, 27, 122, 34, 83, 27, 100, -79, -103, 29, -53, -119, -25, -2, 18, -98, 90, -91, -56, -32, 56, 7,
            -86, 111, 113, 29, -65, 76, 75, 17, -116, 108, 75, 110, -100, 23, -52, -2, -124, -92, 114, 46, -98, 68,
            112, 65, -8, 31, 14, 26, -28, 96, -50, 52, -23, 52, 3, 117, -85, -52, 57, -4, 109, -33, -108, -64, -126,
            67, 81, 71, -110, 116, -45, 72, -41, -106, 90, 0, -20, 83, 69, -25, 115, -83, 100, -98, 126, 37, 112, -24,
            -45, 1, 18, -33, -64, -2, -110, -69, 2, 3, 1, 0, 1, 2, -127, -128, 92, 23, -108, -51, 71, 42, 39, 7, -121,
            -86, -65, 71, 58, 50, 106, 4, 80, 101, -48, 95, -93, -86, -68, -89, 100, -11, -118, 66, 102, -47, -22, 112,
            81, 23, -123, 106, -12, -3, 71, -51, 86, -14, 56, 79, -23, -79, -121, -90, -122, 7, -56, 3, -39, 44, -111,
            62, 54, 3, 74, -57, -104, -2, 8, 68, -39, 22, -3, -67, -68, 74, 116, 55, -103, -96, -123, 21, -123, -123,
            50, 43, 39, 37, -116, -71, -55, -113, 93, 93, -67, -126, 60, -69, -73, -34, 44, 59, -68, 63, -73, -18,
            -126, 33, -65, -106, 46, 101, -78, 86, 82, -45, -110, 85, -122, -124, -20, -61, 124, 24, -62, -125, -45,
            -53, 52, -1, -122, -21, 28, -111, 2, 65, 0, -1, -123, -40, -5, -62, -43, -50, -116, -79, -11, 38, -16, 22,
            114, -59, 127, -99, -87, 45, 48, -35, -124, 103, -31, 111, 97, -11, -59, 49, 54, -111, -116, 125, 96, -128,
            11, 113, -73, 104, -56, -86, -34, 36, 81, -82, -53, -126, -25, 80, 48, 71, -52, 65, -114, -91, -47, -3, 85,
            31, 28, 106, -64, 20, -57, 2, 65, 0, -106, -68, -7, 90, -91, -84, -55, 108, -35, -98, 54, 77, 65, -38, -27,
            -6, -44, 63, -90, -41, 26, 101, 35, -118, -6, 14, -94, -122, -58, -87, 68, 99, 58, -120, -11, -45, -92, -5,
            111, -82, -29, -64, 46, -86, 22, -44, -23, 17, 67, 16, 36, 46, -24, 105, 80, 8, 6, -31, -79, -36, 25, 78,
            118, 109, 2, 65, 0, -21, 111, -121, 99, 73, -67, 56, -56, 120, 59, -6, -7, -94, -91, 115, -122, 71, 93,
            -106, -50, -4, 124, 64, 62, -2, 34, -45, -110, 50, -21, 37, -90, -67, -21, 9, 112, 2, 2, 77, 96, -1, -41,
            24, -67, -50, -127, -93, -122, -64, 99, 11, -12, -114, -65, 1, -40, 127, 68, 76, 27, 33, -35, 4, 7, 2, 64,
            2, 76, -49, -31, 58, 53, -16, -68, -32, -124, -47, 127, 76, 73, -14, -56, 105, 4, -81, -97, 8, -96, 18,
            114, -60, 110, 4, -68, -39, -69, 43, 119, -8, 36, -82, -37, -109, -32, -30, 75, 96, -34, 69, -40, 2, -111,
            45, 29, 62, 80, -72, -68, -98, 127, 60, -31, 98, 121, 127, 37, 68, -99, -107, -31, 2, 64, 71, 69, 74, -41,
            58, 82, -76, 87, -51, 42, -92, -77, -3, 73, 7, 85, 37, 95, 29, -11, 112, 80, 32, -47, 85, -34, -58, 1,
            -74, -125, -124, 101, -60, -79, 1, -13, 8, -126, 31, -61, 62, 108, 13, -13, 7, -46, -37, -98, 77, -90, -11,
            -91, 54, -67, -126, 81, -47, 98, -73, 99, -88, 57, -39, 69};

    public User createAlice() throws Exception {

        KeyFactory kf = KeyFactory.getInstance("RSA");

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(ALICE_PUB_KEY);
        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(ALICE_PRIV_KEY);

        return new User("alice", new KeyPair(kf.generatePublic(publicKeySpec), kf.generatePrivate(privateKeySpec)));
    }

    public static final byte[] BOB_PUB_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0,
            3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -118, 77, 69, -46, 60, -112, -61, 114, 15, -3, -87, 31,
            -35, 101, 72, -32, -5, 52, 45, -11, 32, -29, -97, 114, 94, 97, -28, 68, 113, 66, 109, -97, 59, 54, -87, -72,
            -43, 28, -111, 112, -84, -77, -99, 84, 31, -61, 112, -10, 85, -33, -36, -44, -93, -46, -118, 49, -94, 53,
            -78, 38, 0, -47, 39, 105, -42, 4, 50, 42, -77, -23, -71, -26, 111, 121, -61, -62, 110, -77, 15, 12, -30,
            68, 58, 106, 107, -51, 14, -83, 95, 103, 101, 62, 67, -26, -65, -88, 23, -58, -64, 3, -94, 109, 122, -90,
            47, -63, -51, 77, -27, -37, 23, -113, -93, -5, -6, -6, 95, -2, 114, 81, 70, -70, -31, -58, 10, 78, -125,
            21, 2, 3, 1, 0, 1};

    public static final byte[] BOB_PRIV_KEY = {48, -126, 2, 119, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1,
            1, 1, 5, 0, 4, -126, 2, 97, 48, -126, 2, 93, 2, 1, 0, 2, -127, -127, 0, -118, 77, 69, -46, 60, -112, -61,
            114, 15, -3, -87, 31, -35, 101, 72, -32, -5, 52, 45, -11, 32, -29, -97, 114, 94, 97, -28, 68, 113, 66, 109,
            -97, 59, 54, -87, -72, -43, 28, -111, 112, -84, -77, -99, 84, 31, -61, 112, -10, 85, -33, -36, -44, -93,
            -46, -118, 49, -94, 53, -78, 38, 0, -47, 39, 105, -42, 4, 50, 42, -77, -23, -71, -26, 111, 121, -61, -62,
            110, -77, 15, 12, -30, 68, 58, 106, 107, -51, 14, -83, 95, 103, 101, 62, 67, -26, -65, -88, 23, -58, -64,
            3, -94, 109, 122, -90, 47, -63, -51, 77, -27, -37, 23, -113, -93, -5, -6, -6, 95, -2, 114, 81, 70, -70, -31,
            -58, 10, 78, -125, 21, 2, 3, 1, 0, 1, 2, -127, -128, 19, -66, -10, -94, 14, -83, -88, -118, 7, -120, 114,
            -10, 46, -71, 0, 79, -58, -19, -21, 69, -35, 93, 66, 109, -92, -42, 27, 46, 62, 113, 122, -113, 74, 120, 2,
            -127, 118, 67, -18, -20, 4, 108, 92, -95, 31, 43, -37, 92, 0, 100, -58, -11, -63, 50, 21, 51, 2, -14, -31,
            -83, -107, 94, 71, 95, 26, 72, -78, -116, -111, -44, 0, -97, -85, -61, 56, 122, 115, 45, 42, -68, 79, -3,
            -14, 61, -23, 50, 34, 75, 122, 68, 105, -83, 30, -78, -21, 17, 125, 59, -84, 21, -96, 54, -121, -127, 6,
            33, 56, 113, -65, 94, -99, 113, 108, 61, 86, 105, -20, -89, 8, 47, 92, 127, -107, -100, -84, -51, 96, -31,
            2, 65, 0, -66, 5, -81, 36, -92, -99, -121, -113, 73, -122, -109, 48, 42, 120, -20, 97, -62, 58, 96, 36, -23,
            -105, -121, -10, -86, -19, 66, 124, 123, -85, -120, -68, -126, 12, -32, -47, 88, 102, -70, 70, -117, 23, 3,
            33, 100, -35, 86, 16, 45, 75, 95, 94, -36, -54, 18, -61, 93, 116, -37, -12, 0, 61, -9, -55, 2, 65, 0, -70,
            82, 95, 80, 7, 89, 11, 8, -64, -22, 88, -101, 91, -11, 63, 83, -23, 87, 34, -51, -3, -33, 21, -55, 26, 51,
            -102, -11, 109, 17, -59, -113, 89, 73, 1, -87, 47, 32, -57, 29, -66, -76, -41, -101, -85, 92, 87, 122, -32,
            63, -118, -79, 59, -31, 94, -78, 8, -75, -14, 57, 100, 26, 46, -19, 2, 65, 0, -85, -31, 88, 91, 60, -53,
            -127, 35, 10, -50, -65, -76, -127, -74, 127, -102, -83, -91, 63, -14, 35, -104, -3, 83, 17, -87, 42, -54,
            -114, -46, -54, 12, 57, 86, -116, -60, -49, -63, -100, 28, -45, 19, 45, -79, -73, 26, -66, 14, 67, -22, 57,
            -118, 5, 12, -125, -116, 83, -84, -80, -120, 52, -17, -40, -127, 2, 64, 32, -31, 26, 90, -72, 1, 57, -106,
            64, -36, -39, -24, 8, -111, 61, -84, -92, 23, -79, 87, -94, 126, 52, -116, -7, 103, -77, -25, -83, 104, -98,
            113, 78, 115, 56, -84, -49, 89, 60, 105, -2, 86, 81, 89, -14, 34, 104, 121, -111, -117, 5, 1, -125, -84,
            -96, -106, 80, 61, 51, 82, 119, 92, -69, 125, 2, 65, 0, -127, 53, -20, -57, -91, -47, -42, 41, -27, -91,
            53, 92, -48, 29, 89, 88, -7, 120, -75, 59, 18, 88, 89, -97, 120, 81, 53, 35, 84, 71, 114, 69, 55, -70, 25,
            -93, -117, 114, -38, 110, -42, 71, -70, 105, -70, 34, -57, 36, -1, 109, 25, 28, 67, -80, 28, 107, 12, -118,
            -58, -44, 25, 79, 49, 50};

    public User createBob() throws Exception {

        KeyFactory kf = KeyFactory.getInstance("RSA");

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(BOB_PUB_KEY);
        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(BOB_PRIV_KEY);

        return new User("bob", new KeyPair(kf.generatePublic(publicKeySpec), kf.generatePrivate(privateKeySpec)));
    }

    public static final byte[] CHRIS_PUB_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5,
            0, 3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -85, -84, -30, 6, -22, 17, 46, -115, -24, -7, 57,
            -2, 97, -3, -2, -67, 40, 47, -22, 48, -124, -80, -47, 50, -110, -23, 0, -106, -11, 24, 73, -32, -44, -86,
            97, 38, -64, -17, -126, 92, -44, 127, 51, -97, -125, -92, -123, -28, 66, 40, 40, -80, -103, -51, 118, 78,
            18, -53, -89, 83, -125, 48, 5, 108, -48, 74, 39, -63, 104, -26, -5, -60, 124, 40, 17, 93, -89, -86, 11,
            -63, -20, -72, 100, -37, -55, 28, -67, 39, -122, 48, 117, 26, -44, 59, 50, 106, 11, -53, 22, -92, 78, 43,
            -112, -16, 106, -45, -21, 94, -26, 34, 87, 14, 111, -16, 124, 97, -61, 84, 104, 113, -65, 49, -43, 74, 34,
            22, -83, 7, 2, 3, 1, 0, 1};

    public static final byte[] CHRIS_PRIV_KEY = {48, -126, 2, 117, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13,
            1, 1, 1, 5, 0, 4, -126, 2, 95, 48, -126, 2, 91, 2, 1, 0, 2, -127, -127, 0, -85, -84, -30, 6, -22, 17, 46,
            -115, -24, -7, 57, -2, 97, -3, -2, -67, 40, 47, -22, 48, -124, -80, -47, 50, -110, -23, 0, -106, -11, 24,
            73, -32, -44, -86, 97, 38, -64, -17, -126, 92, -44, 127, 51, -97, -125, -92, -123, -28, 66, 40, 40, -80,
            -103, -51, 118, 78, 18, -53, -89, 83, -125, 48, 5, 108, -48, 74, 39, -63, 104, -26, -5, -60, 124, 40, 17,
            93, -89, -86, 11, -63, -20, -72, 100, -37, -55, 28, -67, 39, -122, 48, 117, 26, -44, 59, 50, 106, 11, -53,
            22, -92, 78, 43, -112, -16, 106, -45, -21, 94, -26, 34, 87, 14, 111, -16, 124, 97, -61, 84, 104, 113, -65,
            49, -43, 74, 34, 22, -83, 7, 2, 3, 1, 0, 1, 2, -127, -128, 28, 33, -119, 44, 30, -32, -49, -29, 27, 32,
            -13, -70, -42, 109, -37, 119, 61, -123, -108, 119, 124, -42, -56, -128, -28, 7, -32, 59, -36, 79, -83,
            -109, 116, -27, -78, 99, -70, 75, -60, -19, -41, 56, 60, -54, 79, -76, -2, -25, -89, 91, -109, 71, 84, -4,
            -112, -3, 60, 33, 56, -6, -5, 77, 60, 38, 17, -43, -85, 68, 64, 42, -51, 103, -98, -71, 95, 63, 50, -79,
            -128, -99, -42, 98, -20, -113, -72, -52, 29, 34, 78, -91, -99, -77, 113, 90, 29, 55, 82, 17, 104, 62, 127,
            -28, -28, -100, -113, 28, -68, 49, 124, 93, -63, 35, -127, 51, 45, 50, -6, 63, 71, -90, -60, 47, 107, -68,
            -56, -70, -112, 49, 2, 65, 0, -9, -76, -85, 50, 91, 124, 91, -53, -82, -35, -35, -76, -18, 15, -52, -33,
            -82, -30, -93, 85, -42, 26, 112, -64, -85, -102, 81, 118, -29, 62, -76, 113, -124, -15, -103, -31, 79, 96,
            97, 36, 60, -18, 34, -20, -45, 26, -99, 39, 103, 71, -73, 101, -103, 65, -89, -47, -23, -98, 66, -34, -69,
            12, -3, 127, 2, 65, 0, -79, 108, 123, 112, -72, 61, -90, -14, 74, 125, 49, 85, 74, -49, 28, -104, -102, -43,
            -124, -48, -66, -44, -84, 105, -97, -45, -88, 94, -13, -80, -54, -78, 50, 101, -109, -17, 78, -74, -35, 72,
            67, -77, -31, -51, -24, -1, 88, -51, 126, -80, -59, 7, 109, -29, 32, 55, 11, 120, 114, 29, 27, 51, 36, 121,
            2, 64, 66, -124, -118, -64, -112, 30, -70, 11, -35, 94, -119, 13, -16, 43, -32, 9, 101, 78, 73, 44, 96, -67,
            98, -17, -22, 101, 27, 97, 64, -82, -13, 7, -44, -6, -120, 39, 32, 8, -78, -83, 103, -117, 79, 103, -89,
            92, -21, 60, -52, -104, 78, -96, -126, -30, 69, -83, -79, -3, -92, -39, 105, 3, -103, 3, 2, 64, 27, 73,
            -12, 50, -126, 35, -7, 105, -118, -53, 118, -85, 7, -74, -109, 79, 101, -127, 49, -52, 105, -115, -116,
            119, 50, 125, -5, -121, -97, 51, -79, -7, 118, -122, -23, 26, 5, -95, 90, -89, -94, -62, 40, 24, -29, -99,
            98, -85, 56, -79, 55, -100, -52, -22, 2, 42, 117, 57, 49, 84, 8, -70, -11, 1, 2, 64, 68, -52, 42, 116, 90,
            -116, -116, -54, 122, -55, 101, 59, 125, 38, 4, 23, -64, 38, 1, -30, 16, -20, 84, -12, -90, 37, 105, 48,
            31, -1, 28, -87, 104, -48, -128, -39, 71, 23, -15, -14, -64, 80, 105, -18, 113, -88, 117, 106, 63, -18, 73,
            -13, -76, -120, -71, -113, -23, 37, -69, 73, -83, 35, 50, -31};

    public User createChris() throws Exception {

        KeyFactory kf = KeyFactory.getInstance("RSA");

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(CHRIS_PUB_KEY);
        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(CHRIS_PRIV_KEY);

        return new User("chris", new KeyPair(kf.generatePublic(publicKeySpec), kf.generatePrivate(privateKeySpec)));
    }

    public static final byte[] DAVE_PUB_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0,
            3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -105, 16, -73, -93, 26, 55, 11, 66, 70, 61, 23, 81, -53,
            101, 79, 97, 123, -86, -62, 103, 44, -82, -17, -58, 117, 58, -22, 38, -107, -116, 122, 48, 46, 34, -88, -94,
            -56, -51, -3, -5, 55, 31, 96, -123, -24, 18, 102, -72, 15, 49, -122, -65, -78, 108, 28, -27, 114, 102, -115,
            -105, 14, -80, -26, -128, 99, -23, -32, 46, 53, 52, -128, -120, -98, -18, -40, 21, -107, -34, 108, 114, 27,
            -104, 78, -56, 95, 7, 89, 66, 11, -10, -33, -66, -75, 75, 36, -21, -7, 15, -93, 91, -54, -63, 10, -56, -92,
            -79, 88, -86, 28, 89, 124, 84, 126, -8, 68, 113, 119, -68, 85, 96, 35, -10, 56, 33, 50, 29, 75, 77, 2, 3,
            1, 0, 1};

    public static final byte[] DAVE_PRIV_KEY = {48, -126, 2, 117, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1,
            1, 1, 5, 0, 4, -126, 2, 95, 48, -126, 2, 91, 2, 1, 0, 2, -127, -127, 0, -105, 16, -73, -93, 26, 55, 11, 66,
            70, 61, 23, 81, -53, 101, 79, 97, 123, -86, -62, 103, 44, -82, -17, -58, 117, 58, -22, 38, -107, -116, 122,
            48, 46, 34, -88, -94, -56, -51, -3, -5, 55, 31, 96, -123, -24, 18, 102, -72, 15, 49, -122, -65, -78, 108,
            28, -27, 114, 102, -115, -105, 14, -80, -26, -128, 99, -23, -32, 46, 53, 52, -128, -120, -98, -18, -40, 21,
            -107, -34, 108, 114, 27, -104, 78, -56, 95, 7, 89, 66, 11, -10, -33, -66, -75, 75, 36, -21, -7, 15, -93, 91,
            -54, -63, 10, -56, -92, -79, 88, -86, 28, 89, 124, 84, 126, -8, 68, 113, 119, -68, 85, 96, 35, -10, 56, 33,
            50, 29, 75, 77, 2, 3, 1, 0, 1, 2, -127, -128, 89, 82, -110, 50, -57, -54, 106, 70, -38, -65, 62, -83, -89,
            -91, -108, -59, 96, 89, 60, -81, -62, -11, 1, 100, 8, 103, 56, -110, 109, -12, -19, 62, -43, -40, -70, 123,
            -34, 94, 38, -30, 70, -38, -81, -71, 29, -38, -37, -113, -45, -76, 6, 40, 13, 56, -19, -15, 33, -82, -49,
            -29, -44, -44, -10, -59, 93, 67, -105, 5, 92, -78, 72, 95, -65, -69, 73, -122, -84, -61, -57, 6, 122, 8,
            108, -85, -1, 111, -61, -41, 106, 74, 108, -104, 16, 84, 17, -125, 67, -44, -62, 92, 123, -20, 25, -15,
            -125, -106, 95, 111, -67, 97, 17, 28, -90, -3, -117, 93, 64, 4, -82, -94, -4, 55, 73, 84, -48, -46, 120, 33,
            2, 65, 0, -1, 95, 39, 11, 41, 108, -4, -19, -125, -126, -49, -81, 68, 47, 42, -3, 99, 87, 57, 94, -43, -88,
            42, 82, 16, -40, 9, 40, -29, 118, 54, -32, 113, -18, -33, 27, 101, -54, -94, -76, 14, -95, -105, -36, -91,
            -57, -74, 32, -43, 13, -83, 12, 72, -52, 109, 39, -121, 117, -97, -76, 125, -89, -27, 25, 2, 65, 0, -105,
            111, -35, -27, 2, 31, -111, -103, 8, 52, 63, 103, 97, 122, 43, 67, -123, -70, -28, 103, 113, 19, 82, 83,
            122, 46, 28, -38, 95, -96, -53, 76, -26, -67, -108, 33, 57, 93, 34, -105, 107, -119, -93, -116, -102, -103,
            -13, 22, 52, -91, -96, 70, -125, -77, -23, 65, 0, -107, -17, -54, -63, -19, 74, 85, 2, 64, 35, -87, 102, 10,
            104, -2, -113, 83, -101, -55, -24, -74, -47, 14, -59, 50, 29, 109, 80, -43, -83, -128, -114, 104, 103, 113,
            -61, -43, -79, -18, 16, 59, -57, -83, 83, -6, -65, 124, 76, -68, 88, 78, -72, -90, 87, -128, 76, 46, -55,
            -111, -33, 88, -105, -47, -12, 108, 80, -66, 92, 79, 24, 61, 26, 1, 2, 64, 68, 71, 119, 7, -29, 110, 50,
            106, -118, 109, 108, 77, 3, -127, 94, -14, 97, -32, -125, 77, 52, -119, -98, -85, -18, -63, -51, -42, -108,
            25, 94, -80, -68, -76, -85, -114, 83, 91, -17, -43, -49, -15, -50, 32, -2, 47, -3, -113, 124, -117, 84, -7,
            -106, 54, 79, 44, 52, -60, 101, -54, -56, -89, 97, -59, 2, 64, 106, -112, 78, 78, -30, -44, 116, -123, -85,
            -6, 19, -96, -20, -32, -69, -108, -67, -92, -96, 119, -40, -70, -32, -62, -49, -3, 100, -26, 105, -82, -10,
            -95, 9, -50, 94, 82, -26, -98, 97, 109, 76, -19, -104, 123, -117, -63, -18, -105, 49, -35, 67, 87, 47, 85,
            81, -45, -69, -40, -62, -24, -110, 107, 101, 115};

    public User createDave() throws Exception {

        KeyFactory kf = KeyFactory.getInstance("RSA");

        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(DAVE_PUB_KEY);
        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(DAVE_PRIV_KEY);

        return new User("dave", new KeyPair(kf.generatePublic(publicKeySpec), kf.generatePrivate(privateKeySpec)));
    }

    public static final Hash T1_HASH = new Hash(new byte[]{40, -116, -87, -84, -110, 50, -117, -48, 72, -113, 47,
            -81, 113, 90, -43, -104, 68, 50, -16, 90, 122, 9, 31, 65, 39, 8, -20, 95, -7, 67, -26, -99});

    public Transaction createTransaction1() throws Exception {

        return new Transaction.Builder()
                .withTo("dave")
                .withAsset(new ValueAsset(1, 0))
                .withFee(1)
                .withTimestamp(1L)
                .build();
    }

    public static final Hash T2_HASH = new Hash(new byte[]{48, -6, 89, 107, 70, 11, 51, -7, -103, 108, 54, -3, -16,
            72, -42, 64, -107, -71, 80, -58, 11, -85, -22, 79, -25, 27, 109, -24, -90, -6, 53, -102});

    public Transaction createTransaction2() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withFee(1)
                .withTimestamp(2L)
                .build();
    }

    public static final Hash T3_HASH = new Hash(new byte[]{-48, -54, -42, 63, 45, -22, 85, 109, -91, 31, -101, -54,
            -81, -95, 12, -23, -105, 79, 103, -82, -12, 35, -107, -93, 43, 97, -127, 119, 91, -83, -53, 121});

    public Transaction createTransaction3() throws Exception {

        return new Transaction.Builder()
                .withTo("dave")
                .withAsset(new ValueAsset(1, 0))
                .withTimestamp(3L)
                .build();
    }

    public static final Hash T4_HASH = new Hash(new byte[]{-56, 108, -44, 85, -3, 110, 95, 100, 84, -97, 16, -6, 63,
            -43, 123, -12, 90, -62, 120, -18, -47, 88, 117, 63, -96, -88, -38, -5, 62, 72, 53, -107});

    public Transaction createTransaction4() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withTimestamp(4L)
                .build();
    }

    public static final Hash B1_HASH = new Hash(new byte[]{0, -113, -96, 94, 107, -81, -72, 62, -47, -71, 122, -91,
            -4, -29, -83, -35, 33, 82, -119, -19, 3, -113, 106, -92, 11, -108, 120, -103, 114, -46, -71, -96});

    public Block createBlock1(Transaction t1, Transaction t3) throws Exception {

        return new Block.Builder()
                .withUserId("dave")
                .withTimestamp(5L)
                .withProofOfWork("318")
                .withTransaction(t1)
                .withTransaction(t3)
                .build();
    }

    public static final Hash B2_HASH = new Hash(new byte[]{0, 103, -11, 36, -9, -52, -6, 115, 49, -125, 108, -57, 25,
            44, -30, -120, 64, -59, -127, 95, 80, 37, -128, 29, -52, 45, -47, 121, 120, -114, 47, -24});

    public Block createBlock2(Transaction t2, Transaction t4) throws Exception {

        return new Block.Builder()
                .withUserId("chris")
                .withTimestamp(6L)
                .withProofOfWork("68")
                .withTransaction(t2)
                .withTransaction(t4)
                .build();
    }

    public static final Hash T5_HASH = new Hash(new byte[]{-91, -16, 6, -78, 10, 30, -120, -99, -94, 10, 53, -94, 46,
            -87, 76, 92, -5, -65, -31, -70, -112, -83, -58, 19, 95, 82, -77, 3, -112, -35, -64, 122});

    public Transaction createTransaction5() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withFee(1)
                .withTimestamp(7L)
                .build();
    }

    public static final byte[] T6_SIGNATURE = {48, -62, -76, -126, -11, 51, -62, -69, -33, -125, -21, -39, -32, -120,
            -35, -10, -92, 38, 95, 25, -58, 89, 14, 28, 16, 91, -113, 48, -84, -103, -78, -104, 93, 90, -100, -88,
            -127, 86, -101, 37, 1, -105, 48, -99, -50, 31, 97, 19, -75, -39, -66, -29, -51, -66, 125, 46, 43, -72,
            -12, -68, 118, -10, -124, -26, -103, -66, 100, 37, 26, -56, 54, -104, -11, 93, 7, 7, -94, 108, 29, 104,
            -112, 15, 77, -61, 44, 122, -41, -21, -28, 23, -119, -41, -106, 93, 120, -87, -98, 42, -77, 29, -119, 45,
            50, -39, -87, -79, -10, -37, -1, -26, -53, 54, 9, -121, -101, -109, 25, 33, -60, -68, -47, 81, 5, -54, 115,
            100, -36, 3};

    public static final Hash T6_HASH = new Hash(new byte[]{-125, 77, -98, 74, 84, 51, -127, 127, 84, 17, 86, -68, 111,
            -107, -4, 31, 84, 84, -59, 40, -108, 46, 127, -92, 62, -106, -57, 112, -71, 87, 19, 26});

    public Transaction createTransaction6() throws Exception {

        Transaction transaction = new Transaction.Builder()
                .withFrom("chris")
                .withTo("alice")
                .withAsset(new ValueAsset(1, 0))
                .withReference("chris-001")
                .withSource(T2_HASH)
                .withTimestamp(8L)
                .build();

        return new Transaction(transaction, T6_SIGNATURE);
    }

    public static final Hash T7_HASH = new Hash(new byte[]{30, -30, 105, -14, 0, -75, -10, -37, -32, 56, -43, 42,
            73, 107, 7, -107, 92, 21, 55, 101, -11, -15, 46, 6, -15, -94, -119, 112, 72, 77, -9, -86});

    public Transaction createTransaction7() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withTimestamp(9L)
                .build();
    }

    public static final Hash B3_HASH = new Hash(new byte[]{0, -56, 95, 14, 9, 123, 119, -46, -92, -63, 36, -102, 107,
            -45, -9, -126, -92, 64, 57, -91, 64, -39, -103, -11, 34, 108, 53, -11, 110, -111, 27, -121});

    public Block createBlock3(Transaction t5, Transaction t6, Transaction t7) throws Exception {

        return new Block.Builder()
                .withPreviousHash(B2_HASH)
                .withUserId("chris")
                .withTimestamp(10L)
                .withProofOfWork("40")
                .withTransaction(t5)
                .withTransaction(t6)
                .withTransaction(t7)
                .build();
    }

    public static final Hash T8_HASH = new Hash(new byte[]{-107, 25, -122, 109, -99, -89, -56, 6, -62, -112, -73, -16,
            -3, 10, 12, -57, 19, 74, -116, -39, -99, 56, -57, -105, -68, -43, -95, -34, 34, -90, -44, 37});

    public Transaction createTransaction8() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withFee(1)
                .withTimestamp(11L)
                .build();
    }

    public static final byte[] T9_SIGNATURE = {70, 6, 10, -100, -122, 111, -113, 105, 64, 108, 103, -63, -84, -5, 9,
            -43, -85, 100, -118, -60, -99, 101, -39, -17, 56, 84, 79, 15, -89, -1, 31, -57, 95, -112, 46, 63, -2, 46,
            115, 71, 43, -79, 56, -25, 110, -98, 87, -89, -21, -76, 101, -119, -104, 4, 68, 10, 32, -94, -68, 120, -98,
            28, -51, 56, -53, 30, 17, 114, -52, 41, -20, -122, -13, -84, 36, -3, 120, -82, 94, -116, 113, 47, -8, -115,
            -34, -16, -62, 80, 118, -128, 65, 101, 46, -72, -81, 57, -64, 0, -65, -74, 126, -107, 93, -2, -84, 52, -19,
            112, 73, -12, 72, -71, 91, 16, -57, 72, -18, -70, 85, 100, 111, 69, -11, 15, -32, -41, 106, 31};

    public static final Hash T9_HASH = new Hash(new byte[]{60, 117, 115, 41, 85, -116, -27, 119, -103, 127, 72, -27,
            12, 90, 109, 72, -51, 57, 78, 1, -110, 107, 125, 5, -55, 65, 127, -7, 52, 127, 28, 114});

    public Transaction createTransaction9() throws Exception {

        Transaction transaction = new Transaction.Builder()
                .withFrom("chris")
                .withTo("bob")
                .withAsset(new ValueAsset(3, 0))
                .withReference("chris-002")
                .withSource(T4_HASH)
                .withSource(T5_HASH)
                .withSource(T7_HASH)
                .withTimestamp(12L)
                .build();

        return new Transaction(transaction, T9_SIGNATURE);
    }

    public static final Hash T10_HASH = new Hash(new byte[]{-20, -70, 18, -25, 123, -126, 116, 6, -5, 74, -107, -19,
            -101, 90, -117, -7, 86, 39, -72, 56, -101, 21, -37, 27, -77, -41, 104, 8, -8, 60, -98, -64});

    public Transaction createTransaction10() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withTimestamp(13L)
                .build();
    }

    public static final Hash B4_HASH = new Hash(new byte[]{0, -7, -29, 86, -77, 64, 23, -91, -62, 18, 26, -36, -84,
            -86, -68, 1, -4, -83, 122, 15, -126, -8, 44, -89, 121, -41, -123, -28, 76, -20, 50, 55});

    public Block createBlock4(Transaction t8, Transaction t9, Transaction t10) throws Exception {

        return new Block.Builder()
                .withPreviousHash(B3_HASH)
                .withUserId("chris")
                .withTimestamp(14L)
                .withProofOfWork("429")
                .withTransaction(t8)
                .withTransaction(t9)
                .withTransaction(t10)
                .build();
    }

    public static final Hash T11_HASH = new Hash(new byte[]{32, 51, 27, -59, 104, -92, -69, 111, -13, -3, 53, -34,
            62, 44, 51, 45, 31, -63, -40, 102, 29, -39, 78, -1, 75, 86, 45, -34, 54, 64, -121, -65});

    public Transaction createTransaction11() throws Exception {

        return new Transaction.Builder()
                .withTo("dave")
                .withAsset(new ValueAsset(1, 0))
                .withFee(1)
                .withTimestamp(15L)
                .build();
    }

    public static final Hash T12_HASH = new Hash(new byte[]{-60, -107, -80, -55, 110, 27, -94, 5, -67, 89, -115,
            24, -53, -50, 47, 10, 30, 58, -97, -12, -98, -76, 60, 5, 6, 88, -43, -16, -81, 53, -40, -95});

    public Transaction createTransaction12() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(1, 0))
                .withFee(1)
                .withTimestamp(16L)
                .build();
    }

    public static final byte[] T13_SIGNATURE = {24, -101, -75, 87, 52, 113, 124, 80, 2, 16, 41, 69, 75, -31, -107, 67,
            -31, 86, 34, 74, -46, -30, -102, -43, 19, 41, 76, 127, -3, 118, -56, 124, 92, -31, -88, -32, -123, -18, -82,
            -4, 116, -111, 20, -17, 11, -3, 5, 125, 125, 27, -54, 85, 80, -60, 106, -88, 113, 43, -113, -1, 75, 83, -48,
            -114, -124, -94, 81, -83, 47, -47, 105, -35, 117, -125, 6, -85, 39, 117, 82, 87, 41, 32, 48, 59, -23, 97,
            41, -17, -111, 51, 74, 67, -24, -100, 65, -34, -44, -96, 84, -66, 52, -71, 92, -7, -123, -24, -28, 33, -35,
            -124, -15, 0, 56, -93, 119, 40, -81, 76, 85, 41, -113, 121, 80, -117, 31, 97, 18, 37};

    public static final Hash T13_HASH = new Hash(new byte[]{-100, 78, 2, 57, -89, 39, -5, -100, -2, 93, -79, -33, 85,
            -109, 94, 120, -46, 120, 53, 5, -40, -52, 26, -101, 127, 70, 50, -52, 101, 14, 95, -109});

    public Transaction createTransaction13() throws Exception {

        Transaction transaction = new Transaction.Builder()
                .withFrom("bob")
                .withTo("alice")
                .withAsset(new ValueAsset(1, 1))
                .withFee(1)
                .withReference("bob-001")
                .withSource(T9_HASH)
                .withTimestamp(17L)
                .build();

        return new Transaction(transaction, T13_SIGNATURE);
    }

    public static final Hash T14_HASH = new Hash(new byte[]{-74, -116, 125, 71, 28, 93, 77, -64, 97, 112, 50, 74, -30,
            71, -91, -86, 2, -92, -58, 100, 83, -47, -88, -68, 104, -90, 66, -112, 93, 34, -10, -80});

    public Transaction createTransaction14() throws Exception {

        return new Transaction.Builder()
                .withTo("chris")
                .withAsset(new ValueAsset(2, 0))
                .withTimestamp(18L)
                .build();
    }

    public static final byte[] T15_SIGNATURE = {-102, 114, -94, 86, 25, -101, 126, -63, 73, -33, -33, 103, 50, -79,
            -13, -104, 122, -81, -83, -91, -22, 41, -70, 97, 18, -35, 106, -30, 3, 82, -96, -127, 88, 54, 29, 124, 89,
            20, -127, -50, -69, -96, 56, 62, 103, -57, 93, -70, -13, 38, -90, 91, 62, -46, 24, -48, -108, -32, -77, 99,
            -94, -93, 40, 122, -12, -71, -61, -43, 97, -111, 100, 89, -85, 13, -94, 64, 126, -89, 82, 13, 43, -126, -48,
            -83, -102, -91, -67, 57, 18, 91, 46, -86, 81, -41, 90, -27, 95, -99, -49, 113, -18, 50, -18, -98, -113, 24,
            -34, -119, -47, 7, -91, -38, 94, 76, -104, 54, 47, 0, 113, -42, -39, 97, -36, 74, -9, 10, 10, -55};

    public static final Hash T15_HASH = new Hash(new byte[]{91, -18, 100, -52, -83, 76, 40, -49, -43, 53, 0, -6, 32,
            94, 118, -128, 54, 27, -120, 92, -108, 5, 70, -6, 58, -8, 15, 14, 98, 13, -47, 0});

    public Transaction createTransaction15() throws Exception {

        Transaction transaction = new Transaction.Builder()
                .withFrom("chris")
                .withTo("bob")
                .withAsset(new ValueAsset(2, 0))
                .withReference("chris-003")
                .withSource(T8_HASH)
                .withSource(T10_HASH)
                .withTimestamp(19L)
                .build();

        return new Transaction(transaction, T15_SIGNATURE);
    }

    public static final Hash T16_HASH = new Hash(new byte[]{56, 20, 21, 37, -69, -18, -96, -8, -37, -54, 111, 28, 57,
            -84, 41, -98, -62, -29, -114, -20, -26, -50, -82, 98, -75, -28, 38, -110, -95, -21, 86, -106});

    public Transaction createTransaction16() throws Exception {

        return new Transaction.Builder()
                .withTo("dave")
                .withAsset(new ValueAsset(2, 0))
                .withTimestamp(20L)
                .build();
    }

    public static final Hash B5_HASH = new Hash(new byte[]{0, 45, -5, -117, 91, -52, 3, -89, 63, -117, -82, 12, 84,
            108, -39, -67, 16, 67, -126, 111, -20, -44, -40, -14, 17, 110, -69, 92, -1, 78, -65, 101});

    public Block createBlock5(Transaction t11, Transaction t13, Transaction t15, Transaction t16) throws Exception {

        return new Block.Builder()
                .withPreviousHash(B4_HASH)
                .withUserId("dave")
                .withTimestamp(21L)
                .withProofOfWork("616")
                .withTransaction(t11)
                .withTransaction(t13)
                .withTransaction(t15)
                .withTransaction(t16)
                .build();
    }

    public static final Hash B6_HASH = new Hash(new byte[]{0, -103, 8, -12, 119, 62, -107, 55, 82, 34, 112, 73, 56, 72,
            -68, 109, 52, 86, -61, -96, -32, -82, -67, -50, -97, -119, -114, -3, 78, -75, -92, -75});

    public Block createBlock6(Transaction t12, Transaction t13, Transaction t14) throws Exception {

        return new Block.Builder()
                .withPreviousHash(B4_HASH)
                .withUserId("chris")
                .withTimestamp(22L)
                .withProofOfWork("64")
                .withTransaction(t12)
                .withTransaction(t13)
                .withTransaction(t14)
                .build();
    }

    public static final byte[] T17_SIGNATURE = {93, -93, 50, -41, -109, 78, 114, 65, 35, 85, 65, -78, 115, -6, -26, 26,
            -4, 118, 36, -1, -83, 52, 8, -20, 63, 123, 43, -57, 115, 14, -118, 34, 79, 40, -73, 74, 19, 63, -3, -8, 68,
            30, -94, -5, 42, 111, 14, 26, 44, 47, -31, -24, -95, -11, -81, -29, -120, 10, 33, -19, -13, -68, -91, -16,
            -126, -27, 52, -24, -37, -40, -70, 44, -102, -124, -9, -72, 42, -102, -49, -87, 65, -55, 67, -46, -91, -61,
            19, 42, 109, 16, -120, -25, -78, -104, 31, -49, -10, 30, -28, -28, -45, 28, -107, 68, -21, 71, -37, 91, 76,
            44, 61, 55, -46, 115, -110, -72, 19, 92, -7, -79, 10, 109, 14, 33, 8, 105, 90, -16};

    public static final Hash T17_HASH = new Hash(new byte[]{-39, 116, -83, 21, -82, 100, 96, 33, 17, 52, 83, -58, -10,
            -12, -24, -123, -112, 47, -111, 78, 82, -116, 107, 103, 90, -108, 19, -72, -99, -57, -29, 18});

    public Transaction createTransaction17() throws Exception {

        Transaction transaction = new Transaction.Builder()
                .withFrom("bob")
                .withTo("alice")
                .withAsset(new ValueAsset(1, 0))
                .withFee(2)
                .withReference("bob-002")
                .withSource(T13_HASH)
                .withSource(T15_HASH)
                .withTimestamp(23L)
                .build();

        return new Transaction(transaction, T17_SIGNATURE);
    }

    public static final Hash T18_HASH = new Hash(new byte[]{91, 113, -25, 47, 12, 13, 83, -56, -36, 19, 20, 22, 94, 61,
            97, -60, -103, -86, 36, -113, 34, -32, -93, 108, 121, -107, -36, -69, 101, -97, 120, -71});

    public Transaction createTransaction18() throws Exception {

        return new Transaction.Builder()
                .withTo("dave")
                .withAsset(new ValueAsset(2, 0))
                .withTimestamp(24L)
                .build();
    }

    public static final Hash B7_HASH = new Hash(new byte[]{0, 96, 100, -33, 112, 69, -7, 113, 58, -56, -34, -70, -96,
            81, -114, -18, 56, 114, 42, -115, 29, 37, 74, -16, -47, -50, -103, -5, -119, -65, 84, 80});

    public Block createBlock7(Transaction t15, Transaction t17, Transaction t18) throws Exception {

        return new Block.Builder()
                .withPreviousHash(B6_HASH)
                .withUserId("dave")
                .withTimestamp(25L)
                .withProofOfWork("190")
                .withTransaction(t15)
                .withTransaction(t17)
                .withTransaction(t18)
                .build();
    }

    public static final Hash T19_HASH = new Hash(new byte[]{48, -37, -45, 6, 93, -92, -68, 21, -49, -59, -51, 90, 36,
            126, -73, -103, -109, -108, 100, -66, -63, -74, -110, -20, 59, -92, -63, 89, 87, 50, -97, 45});

    public Transaction createTransaction19() throws Exception {

        return new Transaction.Builder()
                .withFrom("alice")
                .withTo("bob")
                .withAsset(new UniqueAsset("BD12 PXZ"))
                .withReference("alice-car-001")
                .withTimestamp(25L)
                .build();
    }
}
